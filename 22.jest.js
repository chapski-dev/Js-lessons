//  * Тестирование Jest

// Обычно, когда мы пишем функцию, мы легко можем представить
// что она должна делать и как она будет вести себя в зависимости от переданных параметров
// Во время разработки мы можем проверить правильность работы функции, просто вызвав её,
// например из консоли и сравнить полученный результат с ожидаемым
// При тестировании кода ручными перезапусками легко упустить что нибудь важно


// Jest - это фреймворк для тестирования JS кода
// Работает с проектами TypeScript, Node, React, Angulat, Vue, и др.


// sum.js
function sum(a, b) {
    return a + b;
};

module.export = sum;


// -----------------


// sum.test.js
const sum = require('./sum.js');
test('adds 1 + 2 to equal 3', () => {
    expect(sum(1, 2)).toBe(3);
});


// .toBe() - проверяет на точное равенство
// .not.toBe() - противоположность равенству


// Jest - логические значения

// .toBeNull() - соответсвует только null;
// .toBeUndefined - соответсвует только undefined;
// .toBeDefined -  является противоположностью toBeUndefined;
// .toBeTruthy() - соответсвует всему что if конструкция рассматривает как true;
// .toBeFalsy() - соответсвует всему что if конструкция рассматривает как false;


// Jest - числа

// expect(value).toBeGreaterThen(3); - ожидается value больше 3
// expect(value).toBeGreaterThenOrEqual(3.5) - oжидается value больше или равно 3.5 
// expect(value).toBeLessThen(3); - ожидается value меньше 3
// expect(value).toBeLessThenOrEqual(3.5) - oжидается value меньше или равно 3.5 

// для сопоставления строк с регулярными выражениями используйте .toMatch
// содержит ли массив или обьект конкретное значение используйте .toContain



